package com.phiintegration.ws.controller;

import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import org.json.JSONException;
import org.json.JSONObject;

import com.phiintegration.ws.model.DBCon;
import com.phiintegration.ws.model.msProduct;
import com.phiintegration.ws.model.msUserState;
import com.phiintegration.ws.model.stagingInput;
import com.phiintegration.ws.model.trOrderDetail;
import com.phiintegration.ws.model.trOrderHeader;


public class OrderFlow {
	DBCon db;
	public OrderFlow() throws SQLException{
		db = new DBCon();
	}
	
	public String OrderFirstFlow(msUserState user, stagingInput input){
		
		try {
			RegistrationInterface regis = new RegistrationSQLServer();
			String message = "";
			if(regis.checkPartnerAlias(user.getUsers())){
				UserStateMethod userState;
				userState = new UserStateMethod();
				userState.updateUser(user);
				
			    message = "{message:\"Silahkan pilih toko dari list berikut: ";
				for (String partnerList : regis.getPartnerList(user.getUsers())) {
					message += "\n"+partnerList;
				} 
				
				message += "\" }";
			
			} else {
				message = "{message:\"Mohon register terlebih dahulu\"";
			}
			return message;
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return "{message:\"Gagal Pesan\" }";
	}
	
	public String OrderHeaderFlow(msUserState user, stagingInput input){
		String message = "";
		try{
			RegistrationInterface regis = new RegistrationSQLServer();
			//cek masukan sellernya
			if(regis.checkPartnerAlias(input.getUsername())){
				//System.out.println(input);
				StagingInputMethod sim = new StagingInputMethod();
				sim.addStaging_input(input);
				message = "{message:\"List produk: ";

				//generate OrderHeader
				trOrderHeader th = new trOrderHeader();
				//order number generated by timestamp
				SimpleDateFormat sdfDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
				SimpleDateFormat sdfNum = new SimpleDateFormat("yyyyMMddHHmmssSSS");
				Date now = new Date();
			    String strNum = sdfNum.format(now);
			    String strDate = sdfDate.format(now);
				th.setOrder_number(strNum);
				th.setOrder_date(strDate);
				th.setPartner_id_seller(regis.getPartnerId(input.getMessage()));
				th.setPartner_id_customer(regis.getPartnerId(user.getUsers()));
				th.setSeller_name(input.getMessage());
				th.setCustomer_name(user.getUsers());
				th.setSession_id("random");
				th.setTotal_discount("0");
				th.setTotal_value("0");
				th.setConfirmed(0);
				
				OrderingSQLServer oh = new OrderingSQLServer();
				oh.newOrderHeader(th);	
			
				ProductRegistration pr = new ProductRegistration();
				for (String productName : pr.getProducts(th.getPartner_id_seller())) {
					message += "\n"+productName;
				} 
				
				message += "\" }";
				
				UserStateMethod userState;
				userState = new UserStateMethod();
				userState.updateUser(user);
			} else {
				message = "{message:\"Toko yang anda masukkan salah";
			}
			return message;
		}catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return message;
	}
	
	public String OrderNameFlow(msUserState user ,stagingInput input){
		JSONObject info = new JSONObject();
		try {
			ProductRegistrationInterface  pr = new ProductRegistration();
			StagingInputMethod sim = new StagingInputMethod();
			RegistrationInterface regis = new RegistrationSQLServer();
			
			int sellerID = regis.getPartnerId(sim.selectByState("order", 1, input.getUsername()));
			if(pr.getProductByName(input.getMessage(),sellerID) != null){
				//masukan ke staging input
				sim.addStaging_input(input);
				//response
				info.put("message", "Berapa jumlah yang diinginkan?");
				UserStateMethod userState;
				userState = new UserStateMethod();
				userState.updateUser(user);
				
			} else {
				info.put("message", "Nama produk tidak ditemukan");
			}
		}catch(JSONException e){
			try {
				info.put("error_code", 101);
				info.put("message", false);
				info.put("description", "JSON Error");
				return info.toString();
			} catch (JSONException e1) {
				e1.printStackTrace();
			}
		}
		catch(SQLException e){
			try {
				info.put("error_code", 102);
				info.put("message", false);
				info.put("description", "SQL Error");
				return info.toString();
			} catch (JSONException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		return info.toString();
	}
	
	public String OrderQuantityFlow(msUserState user ,stagingInput input){
		
		JSONObject info = new JSONObject();
		try {
			//ambil quantity dari message, info product, lalu di insert
			ProductRegistrationInterface  pr = new ProductRegistration();
			StagingInputMethod sim = new StagingInputMethod();
			
			String productName = sim.selectByState("order", 2, user.getUsers());
			
			RegistrationInterface regis = new RegistrationSQLServer();
			int sellerID = regis.getPartnerId(sim.selectByState("order", 1, input.getUsername()));
			msProduct product = pr.getProductByName(productName,sellerID);
			
			//construct trOrderDetail
			OrderingInterface ordering = new OrderingSQLServer();
			trOrderDetail od = new trOrderDetail();
			od.setLine_id(1);
			od.setProduct_id(product.getProduct_id());
			od.setProduct_name(product.getProduct_name());
			od.setQuantity(Integer.parseInt(input.getMessage()));
			od.setUnits(product.getProduct_unit());
			od.setDiscount_percentage(0);
			od.setDiscount_value(0);
			od.setPrice(product.getProduct_price());
			od.setTotal_price(product.getProduct_price()*Integer.parseInt(input.getMessage()));
			//set as the header from data type
			od.setOrder_id(ordering.readOrderHeader(user));
			ordering.addOrderDetail(od);
			
			sim.deleteStaging_input(input);
			//response
			info.put("message", "Ada pesanan yang lain?")              ;
			UserStateMethod userState;
			userState = new UserStateMethod();
			userState.updateUser(user);
			
		}catch(JSONException e){
			try {
				info.put("error_code", 101);
				info.put("message", false);
				info.put("description", "JSON Error");
				return info.toString();
			} catch (JSONException e1) {
				e1.printStackTrace();
			}
		}
		catch(SQLException e){
			try {
				info.put("error_code", 102);
				info.put("message", false);
				info.put("description", "SQL Error");
				return info.toString();
			} catch (JSONException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		return info.toString();
	}

	public String confirmOrderFlow(msUserState user, stagingInput input){
		try {
			OrderingInterface ordering = new OrderingSQLServer();
			ordering.updateHeaderTotal(user);
			UserStateMethod userState;
			userState = new UserStateMethod();
			userState.updateUser(user);
			

		    String message = "{message:\"Apakah pesanan anda sudah betul?\"}";
			
		    return message;
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return "{message:\"Gagal Pesan\" }";
	}
	
	public String closeOrderFlow(msUserState user ,stagingInput input){
		JSONObject info = new JSONObject();
		try {
			trOrderHeader oh = new trOrderHeader();
			
			OrderingInterface ordering = new OrderingSQLServer();
			//set as the header from data type
			oh.setOrder_id(ordering.readOrderHeader(user));
			//System.out.println(ordering.checkStock(user));
			if(ordering.checkStock(user)){
				//smtp
				System.out.println("ini adalah nama usernya :" + user.getUser_ID());
				System.out.println("Ini adalah order idnya :" + ordering.readOrderHeader(user));
				
				SMTPMethod sm = new SMTPMethod();
				String id = sm.pickId(user.getUser_ID());
				System.out.println("idnya adalah :" + id);
				String email = sm.pickEmail(Integer.parseInt(id));
				ArrayList<trOrderDetail> order = sm.PickOrder(ordering.readOrderHeader(user));
				
				
				//product_name, quantity, units, price, total_price
				
				String isiBody = "Hi! <br> Berikut adalah total orderan anda!";
				String isiPesan = "<table border = 1>"
					+"<tr>"
						+"<th><center>Nama Product</th>"
						+"<th><center>Jumlah</th>"
						+"<th><center>Unit</th>"
						+"<th><center>Harga</th>"
						+"<th><center>total harga</th>"
					+"</tr>";
				
					for(int a = 0; a < order.size(); a++)
					{
						
					isiPesan += "<tr>"
							+"<td><center>"+  order.get(a).getProduct_name()+"</td>"
							+"<td><center>"+ order.get(a).getQuantity() +"</td>"
							+"<td><center>"+ order.get(a).getUnits() +"</td>"
							+"<td><center>"+ order.get(a).getPrice() +"</td>"
							+"<td><center>"+ order.get(a).getTotal_price() + "</td>"
						+"</tr>";
					}
					int sum = 0;
					for(int b = 0; b < order.size(); b++)
					{
						sum += order.get(b).getTotal_price();
					}
					
					isiPesan +="<tr>"
							+"<td colspan = '2'><center><b>Total</b></td>"
							+"<td colspan = '3'><center>"+ sum +"</td>"
						+"</tr>"
					+"</table>";
				
				sm.sendEmail(email, isiBody, isiPesan);
				
				ordering.minusStock(user);
				ordering.closeOrder(oh);
				info.put("message", "Anda telah berhasil memesan ");
				UserStateMethod userState;
				userState = new UserStateMethod();
				user.setState("start");
				user.setStateNum(0);
				userState.updateUser(user);
			} else{
				info.put("message", "Stock tidak mencukupi silahkan ulangi proses pemesanan ");
				UserStateMethod userState;
				userState = new UserStateMethod();
				user.setState("start");
				user.setStateNum(0);
				userState.updateUser(user);
			}
			
		}catch(JSONException e){
			try {
				info.put("error_code", 101);
				info.put("message", false);
				info.put("description", "JSON Error");
				return info.toString();
			} catch (JSONException e1) {
				e1.printStackTrace();
			}
		}
		catch(SQLException e){
			try {
				info.put("error_code", 102);
				info.put("message", false);
				info.put("description", "SQL Error");
				return info.toString();
			} catch (JSONException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		return info.toString();
	}
	
	public String deleteOrderFlow(msUserState user ,stagingInput input){
		JSONObject info = new JSONObject();
		try {
			StagingInputMethod sim = new StagingInputMethod();
			sim.deleteStaging_input(input);
			trOrderHeader oh = new trOrderHeader();

			OrderingInterface ordering = new OrderingSQLServer();
			//set as the header from data type
			oh.setOrder_id(ordering.readOrderHeader(user));
			boolean result = ordering.deleteOrder(oh);
			
			info.put("message", "cancel "+result);
			UserStateMethod userState;
			userState = new UserStateMethod();
			user.setState("start");
			user.setStateNum(0);
			userState.updateUser(user);
		}catch(JSONException e){
			try {
				info.put("error_code", 101);
				info.put("message", false);
				info.put("description", "JSON Error");
				return info.toString();
			} catch (JSONException e1) {
				e1.printStackTrace();
			}
		}
		catch(SQLException e){
			try {
				info.put("error_code", 102);
				info.put("message", false);
				info.put("description", "SQL Error");
				return info.toString();
			} catch (JSONException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		return info.toString();
	}
	
}
